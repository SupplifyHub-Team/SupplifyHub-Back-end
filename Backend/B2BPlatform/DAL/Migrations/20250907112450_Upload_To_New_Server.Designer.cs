// <auto-generated />
using System;
using System.Collections.Generic;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250907112450_Upload_To_New_Server")]
    partial class Upload_To_New_Server
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Pending")
                        .HasColumnName("CategoryStatus");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar")
                        .HasColumnName("CategoryType");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImagePublicId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("ImagePublicId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("PhotoURL");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Entities.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Pending")
                        .HasColumnName("Status");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("Deals", (string)null);
                });

            modelBuilder.Entity("Entities.DealDetailsVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfDelivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateOfDelivered");

                    b.Property<DateTime>("DealDoneAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DealDoneAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DealId")
                        .HasColumnType("int")
                        .HasColumnName("DealId");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SubmittedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("SubmittedById")
                        .HasColumnType("int")
                        .HasColumnName("SubmittedById");

                    b.HasKey("Id");

                    b.HasIndex("SubmittedById");

                    b.HasIndex("DealId", "SubmittedById")
                        .IsUnique();

                    b.ToTable("DealDetailsVerification", (string)null);
                });

            modelBuilder.Entity("Entities.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<string>("HrEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("HrEmail");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("PostedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("PostedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("JobPost", (string)null);
                });

            modelBuilder.Entity("Entities.JopSeeker", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<string>("ResumePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar")
                        .HasColumnName("ResumePath");

                    b.HasKey("UserId");

                    b.ToTable("JopSeekers", (string)null);
                });

            modelBuilder.Entity("Entities.JopSeekerCategoryApply", b =>
                {
                    b.Property<int>("JopSeekerId")
                        .HasColumnType("int")
                        .HasColumnName("JopSeekerId");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.HasKey("JopSeekerId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("JopSeekerCategoryApplies", (string)null);
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("ContactPersonName");

                    b.Property<string>("ContactPersonNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("ContactPersonNumber");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Deadline");

                    b.Property<int>("NumSuppliersDesired")
                        .HasColumnType("int")
                        .HasColumnName("NumSuppliersDesired");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Active")
                        .HasColumnName("OrderStatus");

                    b.Property<string>("RequiredLocation")
                        .HasMaxLength(255)
                        .HasColumnType("text")
                        .HasColumnName("RequiredLocation");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("Comment");

                    b.Property<int>("DealId")
                        .HasColumnType("int")
                        .HasColumnName("DealId");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("Rating");

                    b.Property<int>("RevieweeId")
                        .HasColumnType("int")
                        .HasColumnName("RevieweeId");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewerId");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SubmittedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("RevieweeId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("DealId", "ReviewerId")
                        .IsUnique();

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("Cons")
                        .HasColumnType("TEXT[]")
                        .HasColumnName("Cons");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Price");

                    b.Property<List<string>>("Pros")
                        .HasColumnType("TEXT[]")
                        .HasColumnName("Pros");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans", (string)null);
                });

            modelBuilder.Entity("Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountOfOrderAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("CountOfOrderAccepted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Description");

                    b.Property<string>("ImagePublicId")
                        .HasColumnType("varchar")
                        .HasColumnName("ImagePublicId");

                    b.Property<bool>("IsConfirmByAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsConfirmByAdmin");

                    b.Property<List<string>>("Locations")
                        .HasColumnType("TEXT[]")
                        .HasColumnName("Locations");

                    b.Property<string>("LogoURL")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("LogoURL");

                    b.Property<int>("NumberOfViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("NumberOfViews");

                    b.Property<string>("TaxNumberURL")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("TaxNumberURL");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("Entities.SupplierAcceptOrderRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ProcessedAt");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int")
                        .HasColumnName("RequestedAmount");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Status");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierAcceptOrderRequests", (string)null);
                });

            modelBuilder.Entity("Entities.SupplierAdvertisementRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ProcessedAt");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int")
                        .HasColumnName("RequestedAmount");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Status");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierAdvertisementRequests", (string)null);
                });

            modelBuilder.Entity("Entities.SupplierCategory", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.HasKey("SupplierId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SupplierCategories", (string)null);
                });

            modelBuilder.Entity("Entities.SupplierProductRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ProcessedAt");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int")
                        .HasColumnName("RequestedAmount");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Status");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierProductRequests", (string)null);
                });

            modelBuilder.Entity("Entities.SupplierSubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CompetitorAndMarketAnalysis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("CompetitorAndMarketAnalysis");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("DirectTechnicalSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("DirectTechnicalSupport");

                    b.Property<bool>("EarlyAccessToOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("EarlyAccessToOrder");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<int>("NumberOfAcceptOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30)
                        .HasColumnName("NumberOfAcceptOrder");

                    b.Property<int>("NumberOfAdvertisement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("NumberOfAdvertisement");

                    b.Property<int>("NumberOfProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("NumberOfProduct");

                    b.Property<int>("NumberOfSpecialProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("NumberOfSpecialProduct");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar")
                        .HasDefaultValue("Pending")
                        .HasColumnName("PaymentStatus");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanId");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("PlanName");

                    b.Property<bool>("ProductVisitsAndPerformanceAnalysis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ProductVisitsAndPerformanceAnalysis");

                    b.Property<bool>("ShowHigherInSearch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ShowHigherInSearch");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("SupplierId")
                        .IsUnique();

                    b.HasIndex("SupplierId", "PlanId", "StartDate")
                        .IsUnique();

                    b.ToTable("SupplierSubscriptionPlans", (string)null);
                });

            modelBuilder.Entity("Entities.SupplierSubscriptionPlanArchive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("ArchivedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ArchivedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<int>("NumberOfAcceptOrder")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfAcceptOrder");

                    b.Property<int>("NumberOfAdvertisement")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfAdvertisement");

                    b.Property<int>("NumberOfProduct")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfProduct");

                    b.Property<int>("NumberOfSpecialProduct")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfSpecialProduct");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("PaymentStatus");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanId");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("PlanName");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierSubscriptionPlanArchives", (string)null);
                });

            modelBuilder.Entity("Entities.UnconfirmedSupplierSubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanId");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("SupplierId");

                    b.ToTable("UnconfirmedSupplierSubscriptionPlans", (string)null);
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("Verified");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Entities.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("ExpiresAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpiresAt");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsRevoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Token");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.DealItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DealDetailsVerificationId")
                        .HasColumnType("integer")
                        .HasColumnName("DealDetailsVerificationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.Property<double>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("DealDetailsVerificationId");

                    b.ToTable("DealItems", (string)null);
                });

            modelBuilder.Entity("Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("Notes");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Description");

                    b.Property<string>("ImagePublicId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("ImagePublicId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductImageURl")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("ProductImageURl");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Models.Entities.SpecialProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int>("Offer")
                        .HasColumnType("int")
                        .HasColumnName("Offer");

                    b.HasKey("ProductId");

                    b.ToTable("SpecialProducts", (string)null);
                });

            modelBuilder.Entity("Models.Entities.SupplierAdvertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<string>("ImagePublicId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("ImagePublicId");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierId");

                    b.Property<string>("TargetUrl")
                        .HasColumnType("varchar")
                        .HasColumnName("TargetUrl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.Property<int?>("clicks")
                        .HasColumnType("int")
                        .HasColumnName("Clicks");

                    b.Property<int?>("impressions")
                        .HasColumnType("int")
                        .HasColumnName("Impressions");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierAdvertisements");
                });

            modelBuilder.Entity("Models.Entities.UserRequestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRequestCategories", (string)null);
                });

            modelBuilder.Entity("Entities.Deal", b =>
                {
                    b.HasOne("Entities.User", "Client")
                        .WithMany("Deals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Order", "Order")
                        .WithOne("Deal")
                        .HasForeignKey("Entities.Deal", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithMany("Deals")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Order");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.DealDetailsVerification", b =>
                {
                    b.HasOne("Entities.Deal", "Deal")
                        .WithMany("DealDetailsVerifications")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("DealDetailsVerifications")
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.JobPost", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithMany("JobPosts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithMany("JobPosts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.JopSeeker", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithOne("JopSeeker")
                        .HasForeignKey("Entities.JopSeeker", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.JopSeekerCategoryApply", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithMany("JopSeekerCategoryApplies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.JopSeeker", "Individual")
                        .WithMany("JopSeekerCategoryApplies")
                        .HasForeignKey("JopSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithMany("Orders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Review", b =>
                {
                    b.HasOne("Entities.Deal", "Deal")
                        .WithMany("Reviews")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "Reviewee")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("RevieweeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.User", "Reviewer")
                        .WithMany("ReviewsGiven")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("Reviewee");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Entities.Supplier", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithOne("Supplier")
                        .HasForeignKey("Entities.Supplier", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.SupplierAcceptOrderRequest", b =>
                {
                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithMany("SupplierAcceptOrderRequests")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.SupplierAdvertisementRequest", b =>
                {
                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithMany("SupplierAdvertisementRequests")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.SupplierCategory", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithMany("SupplierCategorys")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithMany("SupplierCategories")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.SupplierProductRequest", b =>
                {
                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithMany("SupplierProductRequests")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.SupplierSubscriptionPlan", b =>
                {
                    b.HasOne("Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("SupplierSubscriptionPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithOne("SupplierSubscriptionPlan")
                        .HasForeignKey("Entities.SupplierSubscriptionPlan", "SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.SupplierSubscriptionPlanArchive", b =>
                {
                    b.HasOne("Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("SupplierSubscriptionPlanArchive")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithMany("SupplierSubscriptionPlanArchive")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.UnconfirmedSupplierSubscriptionPlan", b =>
                {
                    b.HasOne("Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("TempForSupplierSubscriptionPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithMany("TempForSupplierSubscriptionPlans")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.UserRole", b =>
                {
                    b.HasOne("Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.UserToken", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.DealItem", b =>
                {
                    b.HasOne("Entities.DealDetailsVerification", "DealDetailsVerification")
                        .WithMany("Items")
                        .HasForeignKey("DealDetailsVerificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DealDetailsVerification");
                });

            modelBuilder.Entity("Models.Entities.OrderItem", b =>
                {
                    b.HasOne("Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Models.Entities.Product", b =>
                {
                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Models.Entities.SpecialProduct", b =>
                {
                    b.HasOne("Models.Entities.Product", "Product")
                        .WithOne("SpecialProduct")
                        .HasForeignKey("Models.Entities.SpecialProduct", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.Entities.SupplierAdvertisement", b =>
                {
                    b.HasOne("Entities.Supplier", "Supplier")
                        .WithMany("SupplierAdvertisements")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Models.Entities.UserRequestCategory", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("UserRequestCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Navigation("JobPosts");

                    b.Navigation("JopSeekerCategoryApplies");

                    b.Navigation("Orders");

                    b.Navigation("SupplierCategorys");
                });

            modelBuilder.Entity("Entities.Deal", b =>
                {
                    b.Navigation("DealDetailsVerifications");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Entities.DealDetailsVerification", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Entities.JopSeeker", b =>
                {
                    b.Navigation("JopSeekerCategoryApplies");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Navigation("Deal")
                        .IsRequired();

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("SupplierSubscriptionPlanArchive");

                    b.Navigation("SupplierSubscriptionPlans");

                    b.Navigation("TempForSupplierSubscriptionPlans");
                });

            modelBuilder.Entity("Entities.Supplier", b =>
                {
                    b.Navigation("Deals");

                    b.Navigation("JobPosts");

                    b.Navigation("Products");

                    b.Navigation("SupplierAcceptOrderRequests");

                    b.Navigation("SupplierAdvertisementRequests");

                    b.Navigation("SupplierAdvertisements");

                    b.Navigation("SupplierCategories");

                    b.Navigation("SupplierProductRequests");

                    b.Navigation("SupplierSubscriptionPlan")
                        .IsRequired();

                    b.Navigation("SupplierSubscriptionPlanArchive");

                    b.Navigation("TempForSupplierSubscriptionPlans");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("DealDetailsVerifications");

                    b.Navigation("Deals");

                    b.Navigation("JopSeeker")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("ReviewsGiven");

                    b.Navigation("ReviewsReceived");

                    b.Navigation("Supplier")
                        .IsRequired();

                    b.Navigation("UserRequestCategories");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("Models.Entities.Product", b =>
                {
                    b.Navigation("SpecialProduct")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
